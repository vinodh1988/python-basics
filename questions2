Note: Limit the usage of AI
# 1. Write a function that takes a list of numbers and returns the sum of only the prime numbers.
#    Input: [2, 4, 5, 6, 7]
#    Output: 14

# 2. Write a function that accepts a variable number of string arguments and returns the longest string.
#    Input: "cat", "elephant", "dog"
#    Output: "elephant"

# 3. Write a function that accepts keyword arguments for a student's details (name, marks, subject) and prints a formatted report card.
#    Input: name="John", marks=85, subject="Math"
#    Output: "Report Card\nName: John\nSubject: Math\nMarks: 85"

# 4. Write a function that takes another function as a callback and applies it to the values of a dictionary, returning a new dictionary.
#    Input: {"a": 2, "b": 3}, callback: lambda x: x**2
#    Output: {"a": 4, "b": 9}

# 5. Use a lambda function to sort a list of dictionaries by a specific key's value.
#    Input: [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 20}]
#    Output: [{"name": "Bob", "age": 20}, {"name": "Alice", "age": 25}]

# 6. Use map to convert a list of integers to their binary string representations.
#    Input: [2, 5, 8]
#    Output: ['0b10', '0b101', '0b1000']

# 7. Use filter to select words from a list that are palindromes.
#    Input: ["level", "world", "radar", "python"]
#    Output: ["level", "radar"]

# 8. Use reduce to find the greatest common divisor (GCD) of a list of numbers.
#    Input: [24, 36, 60]
#    Output: 12

# 9. Use the collections.defaultdict to group words by their first letter from a list.
#    Input: ["apple", "banana", "apricot", "blueberry"]
#    Output: {'a': ['apple', 'apricot'], 'b': ['banana', 'blueberry']}

# 10. Write a function that raises a custom exception if a string contains any digits.
#     Input: "hello123"
#     Output: Raises Custom Exception

# 11. Create a class BankAccount with methods to deposit, withdraw, and check balance, raising an exception for insufficient funds.
#     Input: acc.deposit(100), acc.withdraw(50), acc.withdraw(100)
#     Output: 50, Raises Exception

# 12. Demonstrate inheritance by creating a class SavingsAccount that adds interest calculation to BankAccount.
#     Input: acc = SavingsAccount(1000, 0.05); acc.add_interest()
#     Output: balance increases by 5%

# 13. Write a function that takes a list of numbers and returns a tuple of (sum, average, maximum, minimum).
#     Input: [1, 2, 3, 4]
#     Output: (10, 2.5, 4, 1)

# 14. Write a function that accepts a variable number of lists and returns their intersection.
#     Input: [1,2,3], [2,3,4], [3,4,5]
#     Output: [3]

# 15. Write a function that accepts keyword arguments and returns a dictionary with keys and their value lengths.
#     Input: a="hello", b="world"
#     Output: {'a': 5, 'b': 5}

# 16. Write a function that takes a callback and applies it to every second element in a list.
#     Input: [1,2,3,4,5], callback: lambda x: x*10
#     Output: [1, 20, 3, 40, 5]

# 17. Use a lambda function to filter a list of tuples, keeping only those where the sum of elements is even.
#     Input: [(1,2), (2,2), (3,3)]
#     Output: [(2,2), (3,3)]

# 18. Use map to add corresponding elements of two lists.
#     Input: [1,2,3], [4,5,6]
#     Output: [5,7,9]

# 19. Use filter to select numbers from a list that are perfect squares.
#     Input: [1, 2, 4, 7, 9, 16]
#     Output: [1, 4, 9, 16]

# 20. Use reduce to concatenate a list of strings with a hyphen between them.
#     Input: ["a", "b", "c"]
#     Output: "a-b-c"

# 21. Use collections.OrderedDict to remove duplicates from a list while preserving order.
#     Input: [1,2,2,3,1,4]
#     Output: [1,2,3,4]

# 22. Write a function that raises a custom exception if a list contains duplicate elements.
#     Input: [1,2,3,2]
#     Output: Raises Custom Exception

# 23. Create a class Polygon with a method to compute perimeter, and derive Triangle and Rectangle classes from it.
#     Input: Triangle(3,4,5).perimeter()
#     Output: 12

# 24. Write a function that takes a list of functions and a value, and applies each function to the value, returning the results as a list.
#     Input: [lambda x: x+1, lambda x: x*2], 3
#     Output: [4, 6]

# 25. Write a function that accepts a variable number of keyword arguments and returns only those whose values are integers.
#     Input: a=1, b="hello", c=3
#     Output: {'a': 1, 'c': 3}